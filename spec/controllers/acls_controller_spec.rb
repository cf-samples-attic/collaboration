require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AclsController do

  before(:each) do
    @org = Org.create! :display_name => 'VMWare'
    @project = @org.projects.build :display_name => 'CF'
    @project.save!
    @app = App.create! :display_name => 'Optimus'
    @owned_resource = @org.owned_resources.build :resource => @app
    @owned_resource.save!
    @user = User.create! :first_name => 'Monica', :last_name => 'Wilkinson', :display_name => 'Monica W'
    @acl = @project.acls.build valid_attributes
    @acl.save!
  end

  # This should return the minimal set of attributes required to create a valid
  # Acl. As you add validations to Acl, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:owned_resource => @owned_resource, :entity => @user}
  end

  describe "GET index" do
    it "assigns all acls as @acls" do
      get :index, :org_id => @org.id, :project_id => @project.id
      assigns(:acls).should eq([@acl])
    end
  end

  describe "GET show" do
    it "assigns the requested acl as @acl" do
      get :show, :id => @acl.id.to_s, :org_id => @org.id, :project_id => @project.id
      assigns(:acl).should eq(@acl)
    end
  end

  describe "GET new" do
    it "assigns a new acl as @acl" do
      get :new, :org_id => @org.id, :project_id => @project.id
      assigns(:acl).should be_a_new(Acl)
    end
  end

  describe "GET edit" do
    it "assigns the requested acl as @acl" do
      get :edit, :id => @acl.id.to_s, :org_id => @org.id, :project_id => @project.id
      assigns(:acl).should eq(@acl)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Acl" do
        expect {
          post :create, :acl => valid_attributes, :org_id => @org.id, :project_id => @project.id
        }.to change(Acl, :count).by(1)
      end

      it "assigns a newly created acl as @acl" do
        post :create, :acl => valid_attributes, :org_id => @org.id, :project_id => @project.id
        assigns(:acl).should be_a(Acl)
        assigns(:acl).should be_persisted
      end

      it "redirects to the created acl" do
        post :create, :acl => valid_attributes, :org_id => @org.id, :project_id => @project.id
        response.should redirect_to org_project_acl_path(@org, @project, Acl.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved acl as @acl" do
        # Trigger the behavior that occurs when invalid params are submitted
        Acl.any_instance.stub(:save).and_return(false)
        post :create, :acl => {}, :org_id => @org.id, :project_id => @project.id
        assigns(:acl).should be_a_new(Acl)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Acl.any_instance.stub(:save).and_return(false)
        post :create, :acl => {}, :org_id => @org.id, :project_id => @project.id
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested acl" do
        # Assuming there are no other acls in the database, this
        # specifies that the Acl created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Acl.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => @acl.id, :acl => {'these' => 'params'}, :org_id => @org.id, :project_id => @project.id
      end

      it "assigns the requested acl as @acl" do
        put :update, :id => @acl.id, :acl => valid_attributes, :org_id => @org.id, :project_id => @project.id
        assigns(:acl).should eq(@acl)
      end

      it "redirects to the acl" do
        put :update, :id => @acl.id, :acl => valid_attributes, :org_id => @org.id, :project_id => @project.id
        response.should redirect_to org_project_acl_path(@org, @project, @acl)
      end
    end

    describe "with invalid params" do
      it "assigns the acl as @acl" do
        # Trigger the behavior that occurs when invalid params are submitted
        Acl.any_instance.stub(:save).and_return(false)
        put :update, :id => @acl.id.to_s, :acl => {} , :org_id => @org.id, :project_id => @project.id
        assigns(:acl).should eq(@acl)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Acl.any_instance.stub(:save).and_return(false)
        put :update, :id => @acl.id.to_s, :acl => {}, :org_id => @org.id, :project_id => @project.id
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested acl" do
      expect {
        delete :destroy, :id => @acl.id.to_s, :org_id => @org.id, :project_id => @project.id
      }.to change(Acl, :count).by(-1)
    end

    it "redirects to the acls list" do
      delete :destroy, :id => @acl.id.to_s, :org_id => @org.id, :project_id => @project.id
      response.should redirect_to(org_project_acls_url(@org, @project))
    end
  end

end
